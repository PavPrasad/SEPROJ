geeksforgeeks

Write
Write
Come write articles for us and get featured
Practice
Practice
Learn and code with the best industry experts
Premium
Premium
Get access to ad-free content, doubt assistance and more!
Jobs
Jobs
Come and find your dream job with us
Geeks Digest
Quizzes
Geeks Campus
Gblog Articles
IDE
Campus Mantri
pavankumardeviprasad Avatar
 My Profile	 Edit Profile
 My Courses	 Go Premium
 Logout
Home
Saved Videos
Courses
For Working Professionals
LIVE
Self-Paced
For Students
LIVE
Self-Paced
School Courses
Algorithms
Analysis of Algorithms
Data Structures
Interview Corner
Languages
ML & Data Science
CS Subjects
GATE
Web Development
CSS Frameworks
JavaScript Frameworks
JavaScript Libraries
Software Designs
GFG Sheets
Web Dev Cheat Sheets
Company-Wise SDE Sheets
DSA Sheets
School Learning
Mathematics
Maths Notes (Class 8-12)
NCERT Solutions
RD Sharma Solutions
Physics Notes (Class 8-11)
Chemistry Notes
CS Exams/PSUs
ISRO
UGC NET
Student
Post a Job
Curated DSA Lists
Tutorials
Jobs
Practice
GBlog
Puzzles
What's New ?
 Change Language

Data Structures
Algorithms
Interview Preparation
Topic-wise Practice
C++
Java
Python
Competitive Programming
Machine Learning
HTML
SDE Sheet
Puzzles
GFG School
Projects

▲
Related Articles
Destructors in Python
Inheritance in Python
Encapsulation in Python
Polymorphism in Python
Class method vs Static method in Python
File Handling in Python
Reading and Writing to text files in Python
Python Modules
Python Exception Handling
User-defined Exceptions in Python with Examples
Built-in Exceptions in Python
Python Try Except
Regular Expression in Python with Examples | Set 1
First Class functions in Python
Python Closures
Decorators in Python
Help function in Python
Python | __import__() function
Python Classes and Objects
Constructors in Python
Reading and Writing to text files in Python

Difficulty Level : Easy
Last Updated : 15 Jul, 2022
Python provides inbuilt functions for creating, writing, and reading files. There are two types of files that can be handled in python, normal text files and binary files (written in binary language, 0s, and 1s).

Text files: In this type of file, Each line of text is terminated with a special character called EOL (End of Line), which is the new line character (‘\n’) in python by default.
Binary files: In this type of file, there is no terminator for a line, and the data is stored after converting it into machine-understandable binary language.
In this article, we will be focusing on opening, closing, reading, and writing data in a text file.

File Access Modes

Access modes govern the type of operations possible in the opened file. It refers to how the file will be used once its opened. These modes also define the location of the File Handle in the file. File handle is like a cursor, which defines from where the data has to be read or written in the file. There are 6 access modes in python.

Read Only (‘r’) : Open text file for reading. The handle is positioned at the beginning of the file. If the file does not exists, raises the I/O error. This is also the default mode in which a file is opened.
Read and Write (‘r+’): Open the file for reading and writing. The handle is positioned at the beginning of the file. Raises I/O error if the file does not exist.
Write Only (‘w’) : Open the file for writing. For the existing files, the data is truncated and over-written. The handle is positioned at the beginning of the file. Creates the file if the file does not exist.
Write and Read (‘w+’) : Open the file for reading and writing. For an existing file, data is truncated and over-written. The handle is positioned at the beginning of the file.
Append Only (‘a’): Open the file for writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.
Append and Read (‘a+’) : Open the file for reading and writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.
How Files are Loaded into Primary Memory

There are two kinds of memory in a computer i.e. Primary and Secondary memory every file that you saved or anyone saved is on secondary memory cause any data in primary memory is deleted when the computer is powered off. So when you need to change any text file or just to work with them in python you need to load that file into primary memory. Python interacts with files loaded in primary memory or main memory through “file handlers” ( This is how your operating system gives access to python to interact with the file you opened by searching the file in its memory if found it returns a file handler and then you can work with the file ).

Opening a File

It is done using the open() function. No module is required to be imported for this function.

File_object = open(r"File_Name","Access_Mode")
The file should exist in the same directory as the python program file else, the full address of the file should be written in place of the filename. Note: The r is placed before the filename to prevent the characters in the filename string to be treated as special characters. For example, if there is \temp in the file address, then \t is treated as the tab character, and an error is raised of invalid address. The r makes the string raw, that is, it tells that the string is without any special characters. The r can be ignored if the file is in the same directory and the address is not being placed. 

# Open function to open the file "MyFile1.txt" 
# (same directory) in append mode and
file1 = open("MyFile.txt","a")
  
# store its reference in the variable file1 
# and "MyFile2.txt" in D:\Text in file2
file2 = open(r"D:\Text\MyFile2.txt","w+")
Here, file1 is created as an object for MyFile1 and file2 as object for MyFile2

Closing a file

Python-Foundation-Course

close() function closes the file and frees the memory space acquired by that file. It is used at the time when the file is no longer needed or if it is to be opened in a different file mode. File_object.close() 

# Opening and Closing a file "MyFile.txt"
# for object name file1.
file1 = open("MyFile.txt","a")
file1.close()
Writing to a file

There are two ways to write in a file.

write() : Inserts the string str1 in a single line in the text file.
File_object.write(str1)
writelines() : For a list of string elements, each string is inserted in the text file.Used to insert multiple strings at a single time.
File_object.writelines(L) for L = [str1, str2, str3] 
Reading from a file

There are three ways to read data from a text file.

read() : Returns the read bytes in form of a string. Reads n bytes, if no n specified, reads the entire file.
File_object.read([n])
readline() : Reads a line of the file and returns in form of a string.For specified n, reads at most n bytes. However, does not reads more than one line, even if n exceeds the length of the line.
File_object.readline([n])
readlines() : Reads all the lines and return them as each line a string element in a list.
  File_object.readlines()
Note: ‘\n’ is treated as a special character of two bytes 

# Program to show various ways to read and
# write data in a file.
file1 = open("myfile.txt","w")
L = ["This is Delhi \n","This is Paris \n","This is London \n"] 
  
# \n is placed to indicate EOL (End of Line)
file1.write("Hello \n")
file1.writelines(L)
file1.close() #to change file access modes
  
file1 = open("myfile.txt","r+") 
  
print("Output of Read function is ")
print(file1.read())
print()
  
# seek(n) takes the file handle to the nth
# bite from the beginning.
file1.seek(0) 
  
print( "Output of Readline function is ")
print(file1.readline()) 
print()
  
file1.seek(0)
  
# To show difference between read and readline
print("Output of Read(9) function is ") 
print(file1.read(9))
print()
  
file1.seek(0)
  
print("Output of Readline(9) function is ") 
print(file1.readline(9))
  
file1.seek(0)
# readlines function
print("Output of Readlines function is ") 
print(file1.readlines()) 
print()
file1.close()
Output:

Output of Read function is 
Hello 
This is Delhi 
This is Paris 
This is London 


Output of Readline function is 
Hello 


Output of Read(9) function is 
Hello 
Th

Output of Readline(9) function is 
Hello 

Output of Readlines function is 
['Hello \n', 'This is Delhi \n', 'This is Paris \n', 'This is London \n']
Appending to a file

# Python program to illustrate
# Append vs write mode
file1 = open("myfile.txt","w")
L = ["This is Delhi \n","This is Paris \n","This is London \n"] 
file1.writelines(L)
file1.close()
  
# Append-adds at last
file1 = open("myfile.txt","a")#append mode
file1.write("Today \n")
file1.close()
  
file1 = open("myfile.txt","r")
print("Output of Readlines after appending") 
print(file1.readlines())
print()
file1.close()
  
# Write-Overwrites
file1 = open("myfile.txt","w")#write mode
file1.write("Tomorrow \n")
file1.close()
  
file1 = open("myfile.txt","r")
print("Output of Readlines after writing") 
print(file1.readlines())
print()
file1.close()
Output:

Output of Readlines after appending
['This is Delhi \n', 'This is Paris \n', 'This is London \n', 'Today \n']

Output of Readlines after writing
['Tomorrow \n']
Related Article: File Objects in Python 

This article is contributed by Harshit Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
64
Previous
File Handling in Python
Next
Python Modules
RECOMMENDED ARTICLES
Page :
1
2
3
Reading and Writing CSV Files in Python
20, Jun 20
Reading and Writing XML Files in Python
28, Apr 20
Reading and Writing JSON to a File in Python
16, Dec 19
Reading and Writing lists to a file in Python
10, Dec 20
Writing files in background in Python
28, Feb 18
Writing CSV files in Python
26, Dec 19
How to keep old content when Writing to Files in Python?
01, Feb 21
Python | Reading .ini Configuration Files
19, Jun 19
Reading CSV files in Python
16, Dec 19
Reading rpt files with Pandas
12, May 21
How to merge multiple excel files into a single files with Python ?
27, May 21
Python Pillow - Writing Text on Image
16, Mar 21
Reading Text from the Image using Tesseract
20, Aug 20
Python | Merge two text files
16, Jul 19
How to read large text files in Python?
29, Oct 20
How to compare two text files in python?
22, Jan 21
How to read multiple text files from folder in Python?
01, Feb 21
Python - How to search for a string in text files?
22, Jan 21
How to Read Text Files with Pandas?
26, Nov 21
Import Text Files Into Numpy Arrays
16, Mar 21
Reading Python File-Like Objects from C | Python
06, Jun 19
Reading and Generating QR codes in Python using QRtools
05, Jun 17
Python: Convert Speech to text and text to Speech
16, Dec 19
Convert Text and Text File to PDF using Python
08, Jan 20
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
punamsingh628700
jhav365
Article Tags :
Python
Technical Scripter
Practice Tags :
python
Improve Article
Report Issue
Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.


Load Comments
WHAT'S NEW

Python Programming Foundation -Self Paced Course
View Details

Data Structures & Algorithms- Self Paced Course
View Details

Complete Interview Preparation- Self Paced Course
View Details
A-143, 9th Floor, Sovereign Corporate Tower,
Sector-136, Noida, Uttar Pradesh - 201305
feedback@geeksforgeeks.org
Company
About Us
Careers
In Media
Contact Us
Privacy Policy
Copyright Policy
Learn
Algorithms
Data Structures
SDE Cheat Sheet
Machine learning
CS Subjects
Video Tutorials
Courses
News
Top News
Technology
Work & Career
Business
Finance
Lifestyle
Knowledge
Languages
Python
Java
CPP
Golang
C#
SQL
Kotlin
Web Development
Web Tutorials
Django Tutorial
HTML
JavaScript
Bootstrap
ReactJS
NodeJS
Contribute
Write an Article
Improve an Article
Pick Topics to Write
Write Interview Experience
Internships
Video Internship
@geeksforgeeks , Some rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightbox
Start Your Coding Journey Now!
Login
Register
geeksforgeeks

Write
Write
Come write articles for us and get featured
Practice
Practice
Learn and code with the best industry experts
Premium
Premium
Get access to ad-free content, doubt assistance and more!
Jobs
Jobs
Come and find your dream job with us
Geeks Digest
Quizzes
Geeks Campus
Gblog Articles
IDE
Campus Mantri
pavankumardeviprasad Avatar
 My Profile	 Edit Profile
 My Courses	 Go Premium
 Logout
Home
Saved Videos
Courses
For Working Professionals
LIVE
Self-Paced
For Students
LIVE
Self-Paced
School Courses
Algorithms
Analysis of Algorithms
Data Structures
Interview Corner
Languages
ML & Data Science
CS Subjects
GATE
Web Development
CSS Frameworks
JavaScript Frameworks
JavaScript Libraries
Software Designs
GFG Sheets
Web Dev Cheat Sheets
Company-Wise SDE Sheets
DSA Sheets
School Learning
Mathematics
Maths Notes (Class 8-12)
NCERT Solutions
RD Sharma Solutions
Physics Notes (Class 8-11)
Chemistry Notes
CS Exams/PSUs
ISRO
UGC NET
Student
Post a Job
Curated DSA Lists
Tutorials
Jobs
Practice
GBlog
Puzzles
What's New ?
 Change Language

Data Structures
Algorithms
Interview Preparation
Topic-wise Practice
C++
Java
Python
Competitive Programming
Machine Learning
HTML
SDE Sheet
Puzzles
GFG School
Projects

▲
Related Articles
Destructors in Python
Inheritance in Python
Encapsulation in Python
Polymorphism in Python
Class method vs Static method in Python
File Handling in Python
Reading and Writing to text files in Python
Python Modules
Python Exception Handling
User-defined Exceptions in Python with Examples
Built-in Exceptions in Python
Python Try Except
Regular Expression in Python with Examples | Set 1
First Class functions in Python
Python Closures
Decorators in Python
Help function in Python
Python | __import__() function
Python Classes and Objects
Constructors in Python
Reading and Writing to text files in Python

Difficulty Level : Easy
Last Updated : 15 Jul, 2022
Python provides inbuilt functions for creating, writing, and reading files. There are two types of files that can be handled in python, normal text files and binary files (written in binary language, 0s, and 1s).

Text files: In this type of file, Each line of text is terminated with a special character called EOL (End of Line), which is the new line character (‘\n’) in python by default.
Binary files: In this type of file, there is no terminator for a line, and the data is stored after converting it into machine-understandable binary language.
In this article, we will be focusing on opening, closing, reading, and writing data in a text file.

File Access Modes

Access modes govern the type of operations possible in the opened file. It refers to how the file will be used once its opened. These modes also define the location of the File Handle in the file. File handle is like a cursor, which defines from where the data has to be read or written in the file. There are 6 access modes in python.

Read Only (‘r’) : Open text file for reading. The handle is positioned at the beginning of the file. If the file does not exists, raises the I/O error. This is also the default mode in which a file is opened.
Read and Write (‘r+’): Open the file for reading and writing. The handle is positioned at the beginning of the file. Raises I/O error if the file does not exist.
Write Only (‘w’) : Open the file for writing. For the existing files, the data is truncated and over-written. The handle is positioned at the beginning of the file. Creates the file if the file does not exist.
Write and Read (‘w+’) : Open the file for reading and writing. For an existing file, data is truncated and over-written. The handle is positioned at the beginning of the file.
Append Only (‘a’): Open the file for writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.
Append and Read (‘a+’) : Open the file for reading and writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.
How Files are Loaded into Primary Memory

There are two kinds of memory in a computer i.e. Primary and Secondary memory every file that you saved or anyone saved is on secondary memory cause any data in primary memory is deleted when the computer is powered off. So when you need to change any text file or just to work with them in python you need to load that file into primary memory. Python interacts with files loaded in primary memory or main memory through “file handlers” ( This is how your operating system gives access to python to interact with the file you opened by searching the file in its memory if found it returns a file handler and then you can work with the file ).

Opening a File

It is done using the open() function. No module is required to be imported for this function.

File_object = open(r"File_Name","Access_Mode")
The file should exist in the same directory as the python program file else, the full address of the file should be written in place of the filename. Note: The r is placed before the filename to prevent the characters in the filename string to be treated as special characters. For example, if there is \temp in the file address, then \t is treated as the tab character, and an error is raised of invalid address. The r makes the string raw, that is, it tells that the string is without any special characters. The r can be ignored if the file is in the same directory and the address is not being placed. 

# Open function to open the file "MyFile1.txt" 
# (same directory) in append mode and
file1 = open("MyFile.txt","a")
  
# store its reference in the variable file1 
# and "MyFile2.txt" in D:\Text in file2
file2 = open(r"D:\Text\MyFile2.txt","w+")
Here, file1 is created as an object for MyFile1 and file2 as object for MyFile2

Closing a file

Python-Foundation-Course

close() function closes the file and frees the memory space acquired by that file. It is used at the time when the file is no longer needed or if it is to be opened in a different file mode. File_object.close() 

# Opening and Closing a file "MyFile.txt"
# for object name file1.
file1 = open("MyFile.txt","a")
file1.close()
Writing to a file

There are two ways to write in a file.

write() : Inserts the string str1 in a single line in the text file.
File_object.write(str1)
writelines() : For a list of string elements, each string is inserted in the text file.Used to insert multiple strings at a single time.
File_object.writelines(L) for L = [str1, str2, str3] 
Reading from a file

There are three ways to read data from a text file.

read() : Returns the read bytes in form of a string. Reads n bytes, if no n specified, reads the entire file.
File_object.read([n])
readline() : Reads a line of the file and returns in form of a string.For specified n, reads at most n bytes. However, does not reads more than one line, even if n exceeds the length of the line.
File_object.readline([n])
readlines() : Reads all the lines and return them as each line a string element in a list.
  File_object.readlines()
Note: ‘\n’ is treated as a special character of two bytes 

# Program to show various ways to read and
# write data in a file.
file1 = open("myfile.txt","w")
L = ["This is Delhi \n","This is Paris \n","This is London \n"] 
  
# \n is placed to indicate EOL (End of Line)
file1.write("Hello \n")
file1.writelines(L)
file1.close() #to change file access modes
  
file1 = open("myfile.txt","r+") 
  
print("Output of Read function is ")
print(file1.read())
print()
  
# seek(n) takes the file handle to the nth
# bite from the beginning.
file1.seek(0) 
  
print( "Output of Readline function is ")
print(file1.readline()) 
print()
  
file1.seek(0)
  
# To show difference between read and readline
print("Output of Read(9) function is ") 
print(file1.read(9))
print()
  
file1.seek(0)
  
print("Output of Readline(9) function is ") 
print(file1.readline(9))
  
file1.seek(0)
# readlines function
print("Output of Readlines function is ") 
print(file1.readlines()) 
print()
file1.close()
Output:

Output of Read function is 
Hello 
This is Delhi 
This is Paris 
This is London 


Output of Readline function is 
Hello 


Output of Read(9) function is 
Hello 
Th

Output of Readline(9) function is 
Hello 

Output of Readlines function is 
['Hello \n', 'This is Delhi \n', 'This is Paris \n', 'This is London \n']
Appending to a file

# Python program to illustrate
# Append vs write mode
file1 = open("myfile.txt","w")
L = ["This is Delhi \n","This is Paris \n","This is London \n"] 
file1.writelines(L)
file1.close()
  
# Append-adds at last
file1 = open("myfile.txt","a")#append mode
file1.write("Today \n")
file1.close()
  
file1 = open("myfile.txt","r")
print("Output of Readlines after appending") 
print(file1.readlines())
print()
file1.close()
  
# Write-Overwrites
file1 = open("myfile.txt","w")#write mode
file1.write("Tomorrow \n")
file1.close()
  
file1 = open("myfile.txt","r")
print("Output of Readlines after writing") 
print(file1.readlines())
print()
file1.close()
Output:

Output of Readlines after appending
['This is Delhi \n', 'This is Paris \n', 'This is London \n', 'Today \n']

Output of Readlines after writing
['Tomorrow \n']
Related Article: File Objects in Python 

This article is contributed by Harshit Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.





Like
64
Previous
File Handling in Python
Next
Python Modules
RECOMMENDED ARTICLES
Page :
1
2
3
Reading and Writing CSV Files in Python
20, Jun 20
Reading and Writing XML Files in Python
28, Apr 20
Reading and Writing JSON to a File in Python
16, Dec 19
Reading and Writing lists to a file in Python
10, Dec 20
Writing files in background in Python
28, Feb 18
Writing CSV files in Python
26, Dec 19
How to keep old content when Writing to Files in Python?
01, Feb 21
Python | Reading .ini Configuration Files
19, Jun 19
Reading CSV files in Python
16, Dec 19
Reading rpt files with Pandas
12, May 21
How to merge multiple excel files into a single files with Python ?
27, May 21
Python Pillow - Writing Text on Image
16, Mar 21
Reading Text from the Image using Tesseract
20, Aug 20
Python | Merge two text files
16, Jul 19
How to read large text files in Python?
29, Oct 20
How to compare two text files in python?
22, Jan 21
How to read multiple text files from folder in Python?
01, Feb 21
Python - How to search for a string in text files?
22, Jan 21
How to Read Text Files with Pandas?
26, Nov 21
Import Text Files Into Numpy Arrays
16, Mar 21
Reading Python File-Like Objects from C | Python
06, Jun 19
Reading and Generating QR codes in Python using QRtools
05, Jun 17
Python: Convert Speech to text and text to Speech
16, Dec 19
Convert Text and Text File to PDF using Python
08, Jan 20
Article Contributed By :
https://media.geeksforgeeks.org/auth/avatar.png
GeeksforGeeks
Vote for difficulty
Current difficulty : Easy
Easy
Normal
Medium
Hard
Expert
Improved By :
punamsingh628700
jhav365
Article Tags :
Python
Technical Scripter
Practice Tags :
python
Improve Article
Report Issue
Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.


Load Comments
WHAT'S NEW

Python Programming Foundation -Self Paced Course
View Details

Data Structures & Algorithms- Self Paced Course
View Details

Complete Interview Preparation- Self Paced Course
View Details
A-143, 9th Floor, Sovereign Corporate Tower,
Sector-136, Noida, Uttar Pradesh - 201305
feedback@geeksforgeeks.org
Company
About Us
Careers
In Media
Contact Us
Privacy Policy
Copyright Policy
Learn
Algorithms
Data Structures
SDE Cheat Sheet
Machine learning
CS Subjects
Video Tutorials
Courses
News
Top News
Technology
Work & Career
Business
Finance
Lifestyle
Knowledge
Languages
Python
Java
CPP
Golang
C#
SQL
Kotlin
Web Development
Web Tutorials
Django Tutorial
HTML
JavaScript
Bootstrap
ReactJS
NodeJS
Contribute
Write an Article
Improve an Article
Pick Topics to Write
Write Interview Experience
Internships
Video Internship
@geeksforgeeks , Some rights reserved
We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got It !
Lightbox
Start Your Coding Journey Now!
Login
Register

